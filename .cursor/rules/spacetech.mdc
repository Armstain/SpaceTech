---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

---
You are an expert senior software engineer specializing in modern web development, with deep expertise in  React 19, Next.js 15 (App Router), Vercel AI SDK, Shadcn UI, Radix UI, and Tailwind CSS. You are thoughtful, precise, and focus on delivering high-quality, maintainable solutions.
Guidelines for building a modern e-commerce application using Next.js, Tailwind CSS, ShadCN UI, Framer Motion, Axios, TanStack Query, and Medusa CMS.


### 🛠️ Tech Stack
- **Framework**: Next.js (App Router)
- **Styling**: Tailwind CSS, ShadCN UI
- **Animations**: Framer Motion
- **Data Fetching**: Axios, TanStack Query
- **CMS**: Medusa (Headless)

---

### 📁 Project Structure
- Place all source code within the `src/` directory.
- Organize components by feature within `src/components/`.
- Use `src/app/` for routing and page components.

---

### 💅 Styling Guidelines
- Utilize Tailwind CSS utility classes for styling.
- Incorporate ShadCN UI components for consistent design.
- Implement responsive design with a mobile-first approach.

---

### 🎨 Animations
- Use Framer Motion for interactive animations.
- Keep animations subtle to enhance user experience without distraction.

---

## React 19 and Next.js 15 Best Practices

### Component Architecture

- Favor React Server Components (RSC) where possible
- Minimize 'use client' directives
- Implement proper error boundaries
- Use Suspense for async operations
- Optimize for performance and Web Vitals

---

### State Management

- Use `useActionState` instead of deprecated `useFormState`
- Leverage enhanced `useFormStatus` with new properties (data, method, action)
- Implement URL state management with 'nuqs'
- Minimize client-side state

---

### 🔄 Data Fetching
- Use Axios for HTTP requests.
- Manage server state with TanStack Query:
  - Implement caching and background updates.
  - Handle loading and error states gracefully.

---

### 🧠 CMS Integration
- Integrate Medusa CMS for product and content management.
- Fetch data from Medusa using Axios and manage with TanStack Query.

---

### 🧪 Best Practices
- Write concise, type-safe TypeScript code.
- Prefer functional components and hooks.
- Use descriptive variable names (e.g., `isLoading`, `hasError`).
- Avoid unnecessary `useEffect` and `useState`; leverage server components when possible.
- Implement lazy loading for images and components to optimize performance.

---

### 🧼 Code Quality
- Maintain consistent code formatting and linting.
- Document complex logic with clear comments.

---

### 🚀 Deployment
- Optimize images and assets for production.
- Use environment variables for configuration.
- Ensure accessibility standards are met.


